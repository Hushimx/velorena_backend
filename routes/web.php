<?php

use Livewire\Livewire;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Log;

// Import middleware classes directly
use App\Http\Controllers\HomeController;
use Mcamara\LaravelLocalization\Facades\LaravelLocalization;
use Mcamara\LaravelLocalization\Middleware\LocaleSessionRedirect;
use Mcamara\LaravelLocalization\Middleware\LaravelLocalizationViewPath;
use Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRedirectFilter;

// Test route for debugging
Route::get('/test-swagger', function () {
    return response()->json(['message' => 'Test route working', 'timestamp' => now()]);
});

// Language switch is now handled by Laravel Localization package automatically

// User routes (generated by laravel/ui)

Route::group(
    [
        'middleware' => [
            \App\Http\Middleware\SetLocale::class,
            LocaleSessionRedirect::class,
            LaravelLocalizationViewPath::class
        ]
    ],
    function () {

        // this solve conflict between livewire 3 and mcamara localization
        Livewire::setUpdateRoute(function ($handle) {
            return Route::post('/livewire/update', $handle);
        });

        // Language switching route
        Route::get('/lang/{locale}', function ($locale) {
            if (in_array($locale, ['en', 'ar'])) {
                session(['locale' => $locale]);
                app()->setLocale($locale);
            }
            return redirect()->back();
        })->name('lang.switch');

        Auth::routes();

        // Handle GET requests to logout (redirect to home)
        Route::get('/logout', function () {
            return redirect()->route('welcome');
        });

        Route::get('/', [HomeController::class, 'welcome'])->name('welcome');
        Route::get('/home', [HomeController::class, 'index'])->name('home');
        Route::get('/dashboard', [HomeController::class, 'index'])->name('dashboard');
        // Dynamic pages routes
        Route::get('/about', [App\Http\Controllers\ProtectedPageController::class, 'about'])->name('about');
        Route::get('/terms', [App\Http\Controllers\ProtectedPageController::class, 'terms'])->name('terms');
        Route::get('/privacy', [App\Http\Controllers\ProtectedPageController::class, 'privacy'])->name('privacy');
        Route::get('/page/{slug}', [App\Http\Controllers\ProtectedPageController::class, 'show'])->name('page.show');
        // Route::view('/success', "admin.auth.success");

        require __DIR__ . '/admin_routes.php';
        require __DIR__ . '/designer_routes.php';
        require __DIR__ . '/marketer_routes.php';

        // New Design System Routes
        Route::group(['prefix' => 'design'], function () {
            // Design Search Page
            Route::get('/search', [App\Http\Controllers\DesignSearchController::class, 'index'])->name('design.search');
            Route::post('/save-to-cart', [App\Http\Controllers\DesignSearchController::class, 'saveToCart'])->name('design.save-to-cart');
            Route::post('/delete-from-cart', [App\Http\Controllers\DesignSearchController::class, 'deleteFromCart'])->name('design.delete-from-cart');
            Route::post('/add-to-favorites', [App\Http\Controllers\DesignSearchController::class, 'addToFavorites'])->name('design.add-to-favorites');

            // Design Studio Page
            Route::get('/studio', [App\Http\Controllers\DesignStudioController::class, 'index'])->name('design.studio');
            Route::post('/studio/save', [App\Http\Controllers\DesignStudioController::class, 'saveDesign'])->name('design.studio.save');
            Route::post('/studio/add-to-favorites', [App\Http\Controllers\DesignStudioController::class, 'addToFavorites'])->name('design.studio.add-to-favorites');
        });

        // Image proxy route for secure image loading
        Route::get('/image-proxy/{url}', function ($url) {
            try {
                $decodedUrl = base64_decode($url);
                $imageData = file_get_contents($decodedUrl);

                if ($imageData === false) {
                    abort(404);
                }

                $imageInfo = getimagesizefromstring($imageData);
                $mimeType = $imageInfo['mime'] ?? 'image/jpeg';

                return response($imageData)
                    ->header('Content-Type', $mimeType)
                    ->header('Cache-Control', 'public, max-age=3600');
            } catch (\Exception $e) {
                abort(404);
            }
        })->name('image.proxy');

        // Public routes (no authentication required)
        // Products routes
        Route::get('/products', function () {
            // Store the current URL as intended URL for redirect after login if user is not authenticated
            if (!Auth::check()) {
                session(['url.intended' => request()->fullUrl()]);
            }

            return view('users.products.index');
        })->name('user.products.index');

        Route::get('/products/{product:slug}', function (App\Models\Product $product) {
            if (!$product->is_active) {
                abort(404);
            }

            // Store the current URL as intended URL for redirect after login if user is not authenticated
            if (!Auth::check()) {
                session(['url.intended' => request()->fullUrl()]);
            }

            // Load product with optimized relationships
            $product->load([
                'category:id,name,name_ar',
                'options' => function ($query) {
                    $query->where('is_active', true)
                          ->orderBy('sort_order')
                          ->with(['values' => function ($valuesQuery) {
                              $valuesQuery->where('is_active', true)
                                         ->orderBy('sort_order');
                          }]);
                },
                'images' => function ($query) {
                    $query->orderBy('sort_order');
                }
            ]);

            return view('users.products.show', compact('product'));
        })->name('user.products.show');

        // Cart routes
        Route::get('/cart', function () {
            // Store the current URL as intended URL for redirect after login if user is not authenticated
            if (!Auth::check()) {
                session(['url.intended' => request()->fullUrl()]);
            }

            return app(App\Http\Controllers\CartController::class)->index();
        })->name('cart.index');

        // User routes (authentication required)
        Route::middleware(['auth'])->group(function () {
            // Appointment routes
            Route::get('/appointments', [App\Http\Controllers\AppointmentController::class, 'index'])->name('appointments.index');
            Route::get('/appointments/create', [App\Http\Controllers\AppointmentController::class, 'create'])->name('appointments.create');
            Route::post('/appointments', [App\Http\Controllers\AppointmentController::class, 'store'])->name('appointments.store');
            Route::get('/appointments/success', [App\Http\Controllers\AppointmentController::class, 'success'])->name('appointments.success');
            Route::get('/appointments/{appointment}', [App\Http\Controllers\AppointmentController::class, 'show'])->name('appointments.show');
            Route::patch('/appointments/{appointment}/cancel', [App\Http\Controllers\AppointmentController::class, 'cancel'])->name('appointments.cancel');
            Route::get('/appointments/slots', [App\Http\Controllers\AppointmentController::class, 'getAvailableSlots'])->name('appointments.slots');

            // Orders routes
            Route::get('/orders', [App\Http\Controllers\UserOrderController::class, 'index'])->name('user.orders.index');
            Route::get('/orders/{order}', [App\Http\Controllers\UserOrderController::class, 'show'])->name('user.orders.show');
            Route::delete('/orders/{order}', [App\Http\Controllers\UserOrderController::class, 'destroy'])->name('user.orders.destroy');
            Route::post('/orders/{order}/initiate-payment', [App\Http\Controllers\UserOrderController::class, 'initiatePayment'])->name('user.orders.initiate-payment');
            Route::post('/orders/{order}/check-payment', [App\Http\Controllers\UserOrderController::class, 'checkPaymentStatus'])->name('user.orders.check-payment');

            // Client Area routes
            Route::prefix('client')->name('client.')->group(function () {
                Route::get('/', [App\Http\Controllers\ClientAreaController::class, 'index'])->name('index');
                Route::get('/orders', [App\Http\Controllers\ClientAreaController::class, 'orders'])->name('orders');
                Route::get('/appointments', [App\Http\Controllers\ClientAreaController::class, 'appointments'])->name('appointments');
                Route::get('/orders/{order}', [App\Http\Controllers\ClientAreaController::class, 'orderDetails'])->name('order.details');
                Route::get('/appointments/{appointment}', [App\Http\Controllers\ClientAreaController::class, 'appointmentDetails'])->name('appointment.details');
            });

            // Product Design Selection routes
            // ProductDesign routes removed - designs are now order-level only
        });

        // Payment test routes (no authentication required for testing)
        Route::get('/payment-test', function () {
            return view('payment.test');
        })->name('payment.test');

        // Payment success/cancel routes
        Route::get('/payment/success', function () {
            return view('payment.success');
        })->name('payment.success');

        Route::get('/payment/cancel', function () {
            return view('payment.cancel');
        })->name('payment.cancel');

        // Old Design selection routes (keep for backward compatibility)
        Route::middleware(['auth'])->group(function () {
            Route::get('/designs', [App\Http\Controllers\DesignController::class, 'index'])->name('designs.index');
            Route::get('/designs/select-for-product/{product:slug}', [App\Http\Controllers\DesignController::class, 'selectForProduct'])->name('designs.select-for-product');
            Route::post('/designs/save-for-product/{product:slug}', [App\Http\Controllers\DesignController::class, 'saveDesignsForProduct'])->name('designs.save-for-product');
            Route::delete('/designs/remove-from-product/{product:slug}/{design}', [App\Http\Controllers\DesignController::class, 'removeDesignFromProduct'])->name('designs.remove-from-product');
            Route::post('/designs/sync-from-api', [App\Http\Controllers\DesignController::class, 'syncFromApi'])->name('designs.sync-from-api');
        });
    }
);
